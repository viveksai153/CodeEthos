import sys
import numpy as np
import joblib

# Function to extract features from a code snippet
def extract_features(code_snippet):
    features = []
    
    # Length of the code snippet
    features.append(len(code_snippet))
    
    # Check for dangerous C/C++ functions
    dangerous_functions = ['gets(', 'strcpy(', 'malloc(', 'free(']
    features.append(sum([code_snippet.count(func) for func in dangerous_functions]))
    
    # Check for potential XSS patterns (script tags, onerror, etc.)
    xss_patterns = ['<script>', 'onerror=', 'innerHTML', 'alert(']
    features.append(sum([code_snippet.count(pattern) for pattern in xss_patterns]))
    
    # Check for buffer overflow risks (array out of bounds, pointer misuse)
    buffer_overflow_indicators = ['[10]', 'a[10]', 'malloc(', 'free(']
    features.append(sum([code_snippet.count(indicator) for indicator in buffer_overflow_indicators]))
    
    # Check for insecure user input handling
    insecure_input_patterns = ['JSON.parse', 'request.getParameter', 'userInput']
    features.append(sum([code_snippet.count(pattern) for pattern in insecure_input_patterns]))
    
    return features

# Load the trained machine learning model
model = joblib.load('vulnerability_model.pkl')

# Get the code snippet from command line arguments
code_snippet = sys.argv[1]

# Extract features from the code snippet
features = extract_features(code_snippet)

# Convert features to numpy array and reshape for prediction
features = np.array(features).reshape(1, -1)

# Predict whether the code is vulnerable (1) or safe (0)
prediction = model.predict(features)

# Output the prediction result (1 for vulnerable, 0 for safe)
print(prediction[0])
